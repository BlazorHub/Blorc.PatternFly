@using System.Linq
@using Blorc.PatternFly.Components.Dropdown
@using Blorc.PatternFly.Components.Button
@using Blorc.PatternFly.Layouts.Split
@using Blorc.PatternFly.Helpers
@using Blorc.Reflection
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

@inherits RowComponent


    @if (ChildContent != null)
    {
        <tr class="@Class" style="@Style">
            @ChildContent
        </tr>
    }
    else if (ContainerTable != null && Record != null)
    {
        <tr class="@Class" style="@Style">
            @foreach (var columnDefinition in ContainerTable.ColumnDefinitions.OrderBy(pair => pair.Value.Idx).Select(pair => pair.Value))
            {
                if (columnDefinition is ActionColumnDefinition actionColumnDefinition)
                {
                    var actionDefinitions = actionColumnDefinition.ActionSource(Record)?.ToList();
                    <ActionCell>
                        @if (actionDefinitions != null)
                        {
                            @if (actionColumnDefinition.ActionColumnType == ActionColumnType.Toggle)
                            {
                                <Dropdown IsPlain="true" Position="@DropdownPosition.Right">
                                    <Toggle>
                                        <KebabToggle />
                                    </Toggle>
                                    <Items>
                                        @foreach (var action in actionDefinitions)
                                        {
                                            @if (action is SeparatorActionDefinition)
                                            {
                                                <Separator Key="separator" />
                                            }
                                            else if (action is CallActionDefinition callActionDefinition)
                                            {
                                                <DropdownItem Key="@callActionDefinition.Key" OnClick=@((s, e) => callActionDefinition.Action(Record)) IsDisabled="@callActionDefinition.IsDisabled">@callActionDefinition.Label</DropdownItem>
                                            }
                                        }
                                    </Items>
                                </Dropdown>
                            }
                            else if (actionColumnDefinition.ActionColumnType == ActionColumnType.ButtonAndToggle)
                            {
                                var buttonActionDefinition = actionDefinitions.OfType<CallActionDefinition>().FirstOrDefault();
                                <Split IsGutter="true">
                                    @if (buttonActionDefinition != null)
                                    {
                                        <SplitItem IsFilled="true">
                                            <Button Variant=@ButtonVariant.Primary OnClick=@((s, e) => buttonActionDefinition.Action(Record)) IsDisabled="@buttonActionDefinition.IsDisabled">@buttonActionDefinition.Label</Button>
                                        </SplitItem>
                                    }
                                    <SplitItem >
                                        <Dropdown IsPlain="true" Position="@DropdownPosition.Right">
                                            <Toggle>
                                                <KebabToggle />
                                            </Toggle>
                                            <Items>
                                                @{
                                                    var count = 0;
                                                    foreach (var actionDefinition in actionDefinitions)
                                                    {
                                                        if (buttonActionDefinition != actionDefinition)
                                                        {
                                                            if (actionDefinition is SeparatorActionDefinition && count > 0)
                                                            {
                                                                count = 0;
                                                                <Separator Key="separator"/>
                                                            }
                                                            else if (actionDefinition is CallActionDefinition callActionDefinition)
                                                            {
                                                                count++;
                                                                <DropdownItem Key="@callActionDefinition.Key" OnClick=@((s, e) => callActionDefinition.Action(Record)) IsDisabled="@callActionDefinition.IsDisabled">@callActionDefinition.Label</DropdownItem>
                                                            }
                                                        }
                                                    }
                                                }
                                            </Items>
                                        </Dropdown>
                                    </SplitItem>
                                </Split>
                            }
                            else
                            {
                                int i = 0;
                                <Split IsGutter=@(actionColumnDefinition.ActionColumnType == ActionColumnType.GutterButtons)>
                                    @foreach (var action in actionDefinitions)
                                    {
                                        if (action is CallActionDefinition callActionDefinition)
                                        {
                                            var buttonVariant = ButtonVariants[Math.Min(ButtonVariants.Length - 1, i++)];
                                            <SplitItem IsFilled="true">
                                                <Button Variant=@buttonVariant OnClick=@((s, e) => callActionDefinition.Action(Record)) IsDisabled="@callActionDefinition.IsDisabled">@callActionDefinition.Label</Button>
                                            </SplitItem>
                                        }
                                    }
                                </Split>
                            }
                        }
                    </ActionCell>
                }
                else
                {
                    <Cell Label="@columnDefinition.Label" Key="@columnDefinition.Key" Value="@DataHelper.GetValue(Record, columnDefinition.Key)?.ToString()" />
                }
            }
         </tr>
    }