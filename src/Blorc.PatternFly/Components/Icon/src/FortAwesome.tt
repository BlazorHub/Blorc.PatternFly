<#@ template language="C#" hostspecific="true" debug="true" #>

<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Collections.Generic" #>

namespace Blorc.PatternFly.Components.Icon
{
    using System.Runtime.CompilerServices;

<#

	var lines = File.ReadAllLines(this.Host.ResolvePath(@"fortawesome-solid.js")).ToList();
	
    var startIndex = lines.FindIndex(x => x.Contains("var icons = {")) + 1;

    Debug.WriteLine($"Starting at index '{startIndex}'");

    var line = lines[startIndex++];

    while (CreateIcon(line))
    {
        line = lines[startIndex++];
    }
#>
}

<#+ 

public bool CreateIcon(string line)
{
    try
    {
        var nameSplit = line.Split(new [] {":"}, StringSplitOptions.None);

        var name = GetCamelCase(nameSplit[0]);
        var rawValue = nameSplit[1].Trim();
        var value = rawValue.Substring(1, rawValue.Length - 3);
        var valueSplit = value.Split(new [] {","}, StringSplitOptions.None);

        var width = int.Parse(CleanValue(valueSplit[0]));
        var height = int.Parse(CleanValue(valueSplit[1]));
        var ligatures = CleanValue(valueSplit[2]);
        var unicode = CleanValue(valueSplit[3]);
        var svgPathData = CleanValue(valueSplit[4]);

        WriteLine($"    [CompilerGenerated]");
        WriteLine($"    public class {name}Icon : IconComponentBase");
        WriteLine("    {");
        WriteLine($"        public override string Path");
        WriteLine("        {");
        WriteLine($"            get => \"{svgPathData}\";");
        WriteLine("        }");
        WriteLine($"");
        WriteLine($"        public override string ViewBox");
        WriteLine("        {");
        WriteLine($"            get => \"0 0 {width} {height}\";");
        WriteLine("        }");
        WriteLine("    }");

        return true;
    }
    catch (Exception)
    {
        return false;
    }
}

public static string CleanValue(string input)
{
    var value = input.Replace("\"", string.Empty).Trim();
    return value;
}

public static string GetCamelCase(string input)
{
	input = input.Replace("\"", string.Empty).Replace(".icon-", string.Empty).Replace("fa-", string.Empty).Replace("_", " ").Replace("-", " ").Replace("(alias)", string.Empty);

	var output = new StringBuilder(input);

	for (int i = 0; i < output.Length; i++)
	{
		if (i == 0 || output[i - 1] == ' ')
		{
			output[i] = Char.ToUpper(output[i]);
		}
	}

	var finalOutput = output.ToString().Replace(" ", string.Empty);

	// Prefix special cases with _
	if (char.IsDigit(finalOutput[0]) ||
		string.Equals("FontAwesome", finalOutput))
	{
		finalOutput = "_" + finalOutput;
	}

	return finalOutput;
}

#>